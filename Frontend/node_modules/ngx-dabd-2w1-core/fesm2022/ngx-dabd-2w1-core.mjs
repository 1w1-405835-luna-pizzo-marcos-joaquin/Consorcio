import * as i0 from '@angular/core';
import { inject, Component, Input, EventEmitter, Output, Injectable } from '@angular/core';
import { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { from } from 'rxjs';

class ModalConfirmComponent {
    modal = inject(NgbActiveModal);
    body;
    title;
    secondaryTitle;
    confirm;
    cancel;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: ModalConfirmComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.6", type: ModalConfirmComponent, isStandalone: true, selector: "app-modal-confirm", inputs: { body: "body", title: "title", secondaryTitle: "secondaryTitle", confirm: "confirm", cancel: "cancel" }, ngImport: i0, template: "<div class=\"bg-dark\">\r\n  <div class=\"modal-header d-flex justify-content-between\">\r\n    @if (title) {\r\n      <h4 class=\"modal-title\" id=\"modal-title\">{{title}}</h4>\r\n    }\r\n    <a aria-describedby=\"modal-title\" (click)=\"modal.dismiss('Cross click')\">\r\n      <i class=\"bi bi-x-lg\"></i>\r\n    </a>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    @if (secondaryTitle) {\r\n      <p>\r\n        <strong>{{ secondaryTitle }}</strong>\r\n      </p>\r\n    }\r\n    <p>\r\n      {{ body }}\r\n    </p>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-outline-secondary\"\r\n      (click)=\"modal.dismiss()\"\r\n    >\r\n      {{ cancel ?? \"Cancelar\" }}\r\n    </button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"modal.close()\">\r\n      {{ confirm ?? \"Aceptar\" }}\r\n    </button>\r\n  </div>\r\n</div>\r\n", styles: [":host{color:#fff}\n"] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: ModalConfirmComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-modal-confirm', standalone: true, imports: [], template: "<div class=\"bg-dark\">\r\n  <div class=\"modal-header d-flex justify-content-between\">\r\n    @if (title) {\r\n      <h4 class=\"modal-title\" id=\"modal-title\">{{title}}</h4>\r\n    }\r\n    <a aria-describedby=\"modal-title\" (click)=\"modal.dismiss('Cross click')\">\r\n      <i class=\"bi bi-x-lg\"></i>\r\n    </a>\r\n  </div>\r\n  <div class=\"modal-body\">\r\n    @if (secondaryTitle) {\r\n      <p>\r\n        <strong>{{ secondaryTitle }}</strong>\r\n      </p>\r\n    }\r\n    <p>\r\n      {{ body }}\r\n    </p>\r\n  </div>\r\n  <div class=\"modal-footer\">\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn btn-outline-secondary\"\r\n      (click)=\"modal.dismiss()\"\r\n    >\r\n      {{ cancel ?? \"Cancelar\" }}\r\n    </button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"modal.close()\">\r\n      {{ confirm ?? \"Aceptar\" }}\r\n    </button>\r\n  </div>\r\n</div>\r\n", styles: [":host{color:#fff}\n"] }]
        }], propDecorators: { body: [{
                type: Input
            }], title: [{
                type: Input
            }], secondaryTitle: [{
                type: Input
            }], confirm: [{
                type: Input
            }], cancel: [{
                type: Input
            }] } });

class NavbarComponent {
    menuItems = [];
    menuVisited = new EventEmitter();
    onClick(key) {
        this.menuVisited.emit(key);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: NavbarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.6", type: NavbarComponent, isStandalone: true, selector: "app-navbar", inputs: { menuItems: "menuItems" }, outputs: { menuVisited: "menuVisited" }, ngImport: i0, template: "<nav\r\n  class=\"navbar sticky-top navbar-expand-lg bg-dark border-bottom border-body\"\r\n  data-bs-theme=\"dark\"\r\n>\r\n  <div class=\"container-fluid\">\r\n    <a class=\"navbar-brand\" href=\"#\">AppLogo</a>\r\n    <button\r\n      class=\"navbar-toggler\"\r\n      type=\"button\"\r\n      data-bs-toggle=\"collapse\"\r\n      data-bs-target=\"#navbarScroll\"\r\n      aria-controls=\"navbarScroll\"\r\n      aria-expanded=\"false\"\r\n      aria-label=\"Toggle navigation\"\r\n    >\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarScroll\">\r\n      <ul class=\"navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll\">\r\n        @for (item of menuItems; track $index) {\r\n        <li class=\"nav-item\">\r\n          <a\r\n            class=\"nav-link\"\r\n            [class.disabled]=\"item.disabled ?? false\"\r\n            [class.active]=\"item.active\"\r\n            aria-current=\"page\"\r\n            (click)=\"onClick(item.key)\"\r\n            href=\"#\"\r\n          >\r\n            {{ item.name }}\r\n          </a>\r\n        </li>\r\n        }\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</nav>\r\n", styles: [""] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: NavbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-navbar', standalone: true, imports: [], template: "<nav\r\n  class=\"navbar sticky-top navbar-expand-lg bg-dark border-bottom border-body\"\r\n  data-bs-theme=\"dark\"\r\n>\r\n  <div class=\"container-fluid\">\r\n    <a class=\"navbar-brand\" href=\"#\">AppLogo</a>\r\n    <button\r\n      class=\"navbar-toggler\"\r\n      type=\"button\"\r\n      data-bs-toggle=\"collapse\"\r\n      data-bs-target=\"#navbarScroll\"\r\n      aria-controls=\"navbarScroll\"\r\n      aria-expanded=\"false\"\r\n      aria-label=\"Toggle navigation\"\r\n    >\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarScroll\">\r\n      <ul class=\"navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll\">\r\n        @for (item of menuItems; track $index) {\r\n        <li class=\"nav-item\">\r\n          <a\r\n            class=\"nav-link\"\r\n            [class.disabled]=\"item.disabled ?? false\"\r\n            [class.active]=\"item.active\"\r\n            aria-current=\"page\"\r\n            (click)=\"onClick(item.key)\"\r\n            href=\"#\"\r\n          >\r\n            {{ item.name }}\r\n          </a>\r\n        </li>\r\n        }\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</nav>\r\n" }]
        }], propDecorators: { menuItems: [{
                type: Input
            }], menuVisited: [{
                type: Output
            }] } });

var SidebarPlacement;
(function (SidebarPlacement) {
    SidebarPlacement[SidebarPlacement["LEFT"] = 0] = "LEFT";
    SidebarPlacement[SidebarPlacement["RIGHT"] = 1] = "RIGHT";
})(SidebarPlacement || (SidebarPlacement = {}));

class SideNavbarComponent {
    title;
    showClose = true;
    placement = SidebarPlacement.LEFT;
    sidebarItems = [];
    sidebarVisited = new EventEmitter();
    placements = SidebarPlacement;
    onClick(key) {
        this.sidebarVisited.emit(key);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: SideNavbarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.6", type: SideNavbarComponent, isStandalone: true, selector: "app-side-navbar", inputs: { title: "title", showClose: "showClose", placement: "placement", sidebarItems: "sidebarItems" }, outputs: { sidebarVisited: "sidebarVisited" }, ngImport: i0, template: "<!-- @if (sidebarItems.length) {\r\n  <div class=\"sidebar-wrapper\">\r\n    <nav class=\"nav bg-dark flex-column\" data-bs-theme=\"dark\">\r\n      @for (item of sidebarItems; track $index) {\r\n      <a\r\n        class=\"nav-link\"\r\n        [class.disabled]=\"item.disabled ?? false\"\r\n        [class.active]=\"item.active\"\r\n        aria-current=\"page\"\r\n        (click)=\"onClick(item.key)\"\r\n        href=\"#\"\r\n      >\r\n        @if (item.icon) {\r\n        <i class=\"bi-{{ item.icon }}\"></i>\r\n        }\r\n        {{ item.name }}\r\n      </a>\r\n      }\r\n    </nav>\r\n\r\n    <ng-content></ng-content>\r\n  </div>\r\n} -->\r\n\r\n<div class=\"sidebar-wrapper\">\r\n  <div class=\"sidebar-menu bg-dark\">\r\n    <a\r\n      class=\"sidebar-menu-action pt-5\"\r\n      data-bs-toggle=\"offcanvas\"\r\n      href=\"#sidebar\"\r\n      role=\"button\"\r\n      aria-controls=\"sidebar\"\r\n      data-bs-offcanvas\r\n    >\r\n      <i class=\"bi-arrow-right-circle-fill\"></i>\r\n    </a>\r\n    <div\r\n      class=\"bg-dark offcanvas\"\r\n      [class.offcanvas-start]=\"placement == placements.LEFT\"\r\n      [class.offcanvas-end]=\"placement == placements.RIGHT\"\r\n      tabindex=\"-1\"\r\n      id=\"sidebar\"\r\n      aria-labelledby=\"sidebarLabel\"\r\n    >\r\n      <div class=\"offcanvas-header mt-2 d-flex justify-content-between\">\r\n        @if (title) {\r\n        <h5 class=\"offcanvas-title fs-3\" id=\"sidebarLabel\">\r\n          {{ title }}\r\n        </h5>\r\n\r\n        } @if (showClose) {\r\n        <a data-bs-dismiss=\"offcanvas\" aria-label=\"Close\">\r\n          <i class=\"bi bi-x-lg\"></i>\r\n        </a>\r\n        }\r\n      </div>\r\n      <div class=\"offcanvas-body\">\r\n        <div class=\"ms-3\">\r\n          @for (item of sidebarItems; track $index) { @if (item.icon) {\r\n          <i class=\"bi-{{ item.icon }}\"></i>\r\n          }\r\n\r\n          <a data-bs-dismiss=\"offcanvas\" (click)=\"onClick(item.key)\"\r\n            ><span class=\"fs-5\">{{ item.name }}</span></a\r\n          >\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <ng-content></ng-content>\r\n</div>\r\n", styles: [".sidebar-wrapper{display:flex;flex-direction:row}.sidebar-wrapper>.sidebar-menu{height:calc(100vh - 57px);width:70px}.sidebar-wrapper .sidebar-menu-action{position:fixed;top:0;left:0;width:60px;height:100%;border:none;box-shadow:10px 5px 5px -4px #00000052;-webkit-box-shadow:10px 5px 5px -4px rgba(0,0,0,.32);-moz-box-shadow:10px 5px 5px -4px rgba(0,0,0,.32);display:flex;justify-content:center;align-items:center}.sidebar-wrapper .sidebar-menu-action i{width:40px;position:relative;color:#fff;animation-name:example;animation-duration:2s;animation-iteration-count:infinite;animation-direction:alternate;animation-timing-function:ease-in-out;animation-play-state:running;text-align:center}.sidebar-wrapper .sidebar-menu-action:active{border:none}.sidebar-wrapper a{margin-left:5px}.offcanvas{--bs-offcanvas-width: 200px;color:#fff}\n"] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: SideNavbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-side-navbar', standalone: true, imports: [], template: "<!-- @if (sidebarItems.length) {\r\n  <div class=\"sidebar-wrapper\">\r\n    <nav class=\"nav bg-dark flex-column\" data-bs-theme=\"dark\">\r\n      @for (item of sidebarItems; track $index) {\r\n      <a\r\n        class=\"nav-link\"\r\n        [class.disabled]=\"item.disabled ?? false\"\r\n        [class.active]=\"item.active\"\r\n        aria-current=\"page\"\r\n        (click)=\"onClick(item.key)\"\r\n        href=\"#\"\r\n      >\r\n        @if (item.icon) {\r\n        <i class=\"bi-{{ item.icon }}\"></i>\r\n        }\r\n        {{ item.name }}\r\n      </a>\r\n      }\r\n    </nav>\r\n\r\n    <ng-content></ng-content>\r\n  </div>\r\n} -->\r\n\r\n<div class=\"sidebar-wrapper\">\r\n  <div class=\"sidebar-menu bg-dark\">\r\n    <a\r\n      class=\"sidebar-menu-action pt-5\"\r\n      data-bs-toggle=\"offcanvas\"\r\n      href=\"#sidebar\"\r\n      role=\"button\"\r\n      aria-controls=\"sidebar\"\r\n      data-bs-offcanvas\r\n    >\r\n      <i class=\"bi-arrow-right-circle-fill\"></i>\r\n    </a>\r\n    <div\r\n      class=\"bg-dark offcanvas\"\r\n      [class.offcanvas-start]=\"placement == placements.LEFT\"\r\n      [class.offcanvas-end]=\"placement == placements.RIGHT\"\r\n      tabindex=\"-1\"\r\n      id=\"sidebar\"\r\n      aria-labelledby=\"sidebarLabel\"\r\n    >\r\n      <div class=\"offcanvas-header mt-2 d-flex justify-content-between\">\r\n        @if (title) {\r\n        <h5 class=\"offcanvas-title fs-3\" id=\"sidebarLabel\">\r\n          {{ title }}\r\n        </h5>\r\n\r\n        } @if (showClose) {\r\n        <a data-bs-dismiss=\"offcanvas\" aria-label=\"Close\">\r\n          <i class=\"bi bi-x-lg\"></i>\r\n        </a>\r\n        }\r\n      </div>\r\n      <div class=\"offcanvas-body\">\r\n        <div class=\"ms-3\">\r\n          @for (item of sidebarItems; track $index) { @if (item.icon) {\r\n          <i class=\"bi-{{ item.icon }}\"></i>\r\n          }\r\n\r\n          <a data-bs-dismiss=\"offcanvas\" (click)=\"onClick(item.key)\"\r\n            ><span class=\"fs-5\">{{ item.name }}</span></a\r\n          >\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <ng-content></ng-content>\r\n</div>\r\n", styles: [".sidebar-wrapper{display:flex;flex-direction:row}.sidebar-wrapper>.sidebar-menu{height:calc(100vh - 57px);width:70px}.sidebar-wrapper .sidebar-menu-action{position:fixed;top:0;left:0;width:60px;height:100%;border:none;box-shadow:10px 5px 5px -4px #00000052;-webkit-box-shadow:10px 5px 5px -4px rgba(0,0,0,.32);-moz-box-shadow:10px 5px 5px -4px rgba(0,0,0,.32);display:flex;justify-content:center;align-items:center}.sidebar-wrapper .sidebar-menu-action i{width:40px;position:relative;color:#fff;animation-name:example;animation-duration:2s;animation-iteration-count:infinite;animation-direction:alternate;animation-timing-function:ease-in-out;animation-play-state:running;text-align:center}.sidebar-wrapper .sidebar-menu-action:active{border:none}.sidebar-wrapper a{margin-left:5px}.offcanvas{--bs-offcanvas-width: 200px;color:#fff}\n"] }]
        }], propDecorators: { title: [{
                type: Input
            }], showClose: [{
                type: Input
            }], placement: [{
                type: Input
            }], sidebarItems: [{
                type: Input
            }], sidebarVisited: [{
                type: Output
            }] } });

class ModalService {
    ngModalService = inject(NgbModal);
    modalRef;
    showConfirm(settings) {
        this.modalRef = this.ngModalService.open(ModalConfirmComponent);
        this.modalRef.componentInstance.body = settings.body;
        this.modalRef.componentInstance.title = settings.title;
        this.modalRef.componentInstance.secondaryTitle = settings.secondaryTitle;
        this.modalRef.componentInstance.confirm = settings.confirmText;
        this.modalRef.componentInstance.cancel = settings.cancelText;
        return from(this.modalRef.result);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: ModalService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: ModalService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: ModalService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

/*
 * Public API Surface of ngx-dabd-t1-core
 */
// components

/**
 * Generated bundle index. Do not edit.
 */

export { ModalConfirmComponent, ModalService, NavbarComponent, SideNavbarComponent, SidebarPlacement };
//# sourceMappingURL=ngx-dabd-2w1-core.mjs.map
